import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase environment variables')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function runComprehensiveTests() {
  console.log('üß™ COMPREHENSIVE DATABASE TESTS STARTING...\n')

  // Test 1: Database Connection
  console.log('1Ô∏è‚É£ Testing Database Connection...')
  try {
    const { data, error, count } = await supabase.from('vendors').select('*', { count: 'exact', head: true })
    if (error) throw error
    console.log('‚úÖ Database connection successful')
    console.log(`üìä Current vendors count: ${count || 0}`)
  } catch (error) {
    console.log('‚ùå Database connection failed:', error.message)
    return
  }

  // Test 2: Vendors Table
  console.log('\n2Ô∏è‚É£ Testing Vendors Table...')
  try {
    const { data: vendors, error } = await supabase
      .from('vendors')
      .select('*')
      .limit(5)
    
    if (error) throw error
    console.log(`‚úÖ Vendors table accessible - Found ${vendors.length} vendors`)
    if (vendors.length > 0) {
      console.log(`üìã Sample vendor: ${vendors[0].shop_name} (${vendors[0].status})`)
    }
  } catch (error) {
    console.log('‚ùå Vendors table test failed:', error.message)
  }

  // Test 3: Orders Table
  console.log('\n3Ô∏è‚É£ Testing Orders Table...')
  try {
    const { data: orders, error } = await supabase
      .from('orders')
      .select('*')
      .limit(5)
    
    if (error) throw error
    console.log(`‚úÖ Orders table accessible - Found ${orders.length} orders`)
    if (orders.length > 0) {
      console.log(`üìã Sample order: #${orders[0].id.slice(0, 8)} - ${orders[0].status}`)
    }
  } catch (error) {
    console.log('‚ùå Orders table test failed:', error.message)
  }

  // Test 4: Messages Table
  console.log('\n4Ô∏è‚É£ Testing Messages Table...')
  try {
    const { data: messages, error } = await supabase
      .from('messages')
      .select('*')
      .limit(5)
    
    if (error) throw error
    console.log(`‚úÖ Messages table accessible - Found ${messages.length} messages`)
    if (messages.length > 0) {
      console.log(`üìã Sample message: "${messages[0].content.slice(0, 50)}..."`)
    }
  } catch (error) {
    console.log('‚ùå Messages table test failed:', error.message)
  }

  // Test 5: Profiles Table
  console.log('\n5Ô∏è‚É£ Testing Profiles Table...')
  try {
    const { data: profiles, error } = await supabase
      .from('profiles')
      .select('*')
      .limit(5)
    
    if (error) throw error
    console.log(`‚úÖ Profiles table accessible - Found ${profiles.length} profiles`)
    if (profiles.length > 0) {
      console.log(`üìã Sample profile: ${profiles[0].role || 'No role'} user`)
    }
  } catch (error) {
    console.log('‚ùå Profiles table test failed:', error.message)
  }

  // Test 6: Check for Products Table (Should Not Exist)
  console.log('\n6Ô∏è‚É£ Testing Products Table Removal...')
  try {
    const { data: products, error } = await supabase
      .from('products')
      .select('*')
      .limit(1)
    
    console.log('‚ùå Products table still exists! This should have been removed.')
  } catch (error) {
    if (error.message.includes('does not exist') || error.message.includes('relation') || error.code === '42P01') {
      console.log('‚úÖ Products table successfully removed - Perfect!')
    } else {
      console.log('‚ö†Ô∏è Unexpected error:', error.message)
    }
  }

  // Test 7: Authentication Tables
  console.log('\n7Ô∏è‚É£ Testing Authentication System...')
  try {
    const { data: users, error } = await supabase.auth.getSession()
    console.log('‚úÖ Authentication system accessible')
    console.log(`üîê Current session: ${users.session ? 'Active' : 'No active session'}`)
  } catch (error) {
    console.log('‚ùå Authentication test failed:', error.message)
  }

  console.log('\nüéâ COMPREHENSIVE TESTS COMPLETED!')
  console.log('=' .repeat(50))
}

runComprehensiveTests().catch(console.error)
